#+STARTUP: overview
* UI tweaks
  #+BEGIN_SRC emacs-lisp
    (setq default-cursor-type '(bar . 3))

    (load-theme 'wombat)

    (global-hl-line-mode)
    (set-face-background hl-line-face "gray20")
    (set-face-attribute hl-line-face nil :underline nil)

    (global-linum-mode 1)
    (column-number-mode 1)

    (global-auto-revert-mode 1)
    (setq auto-revert-verbose t)

    (put 'dired-find-alternate-file 'disabled nil)
  #+END_SRC  
* Org
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
* Auto-completion
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))
  #+END_SRC
* Searching
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      )

    (use-package counsel
      :ensure t
      )

    (use-package ivy
      :ensure t
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq enable-recursive-minibuffers t)
        (global-set-key "\C-s" 'swiper)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "<f6>") 'ivy-resume)
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "<f1> f") 'counsel-describe-function)
        (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
        (global-set-key (kbd "<f1> l") 'counsel-find-library)
        (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
        (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
        (global-set-key (kbd "C-c g") 'counsel-git)
        (global-set-key (kbd "C-c j") 'counsel-git-grep)
        (global-set-key (kbd "C-c k") 'counsel-ag)
        (global-set-key (kbd "C-x l") 'counsel-locate)
        (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
        (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
        ))
  #+END_SRC
* Syntax checking and linting
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :config
      (global-flycheck-mode t))
  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    (setq py-python-command "python3")
    (setq python-shell-interpreter "python3")

    (use-package elpy
      :ensure t
      :config 
      (elpy-enable))

    (use-package virtualenvwrapper
      :ensure t
      :config
      (venv-initialize-interactive-shells)
      (venv-initialize-eshell))

    ;(use-package jedi
    ;  :ensure t
    ;  :init
    ;  (add-hook 'python-mode-hook 'jedi:setup)
    ;  (add-hook 'python-mode-hook 'jedi:ac-setup)
    ;  )
  #+END_SRC
* Snippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1)
      )
  #+END_SRC
* Undo / Redo
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode)
      )
  #+END_SRC
* Ibuffer
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("org" (name . "^.*org$"))
                   ("magit" (mode . magit-mode))
                   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                   ("code" (or
                                   (mode . perl-mode)
                                   (mode . emacs-lisp-mode)
                                   (mode . python-mode)
                                   (mode . ess-mode)
                                   (mode . c++-mode)))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")))
                   ))))
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-auto-mode 1)
                (ibuffer-switch-to-saved-filter-groups "default")))

    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)

    ;; Don't ask for confirmation to delete marked buffers
    (setq ibuffer-expert t)
  #+END_SRC
* ESS
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/ess")
    (setq ess-sas-tab-stop-list '(2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40))
    (setq ess-sas-edit-keys-toggle t)
    (require 'ess-site)
    (require 'ess-r-mode)
    (setq sas-indent-width                  2)
    (setq ess-indent-level                  2)
    (setq ess-continued-statement-offset    2)
    (setq ess-brace-offset                  0)
    (setq ess-arg-function-offset           2)
    (setq ess-expression-offset             2)
    (setq ess-else-offset                   0)
    (setq ess-close-brace-offset            0)
    (setq ess-nuke-trailing-whitespace-p    t)
  #+END_SRC
* PCRE
  #+BEGIN_SRC emacs-lisp
    (use-package pcre2el
      :ensure t
      :config 
      (pcre-mode)
      )
  #+END_SRC
* Git
  #+BEGIN_SRC emacs-lisp
      (use-package magit
        :ensure t
        :init
        (bind-key "C-x g" 'magit-status)
        )
  #+END_SRC
* Dired+
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/dired+")
    (require 'dired+)
  #+END_SRC
* Learning packages
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)

    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC
* VIM emulation
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/evil")
    (require 'evil)
    (evil-mode 1)
  #+END_SRC
